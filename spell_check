#!/bin/bash

#######################################
# Purpose: Check each word in a file  #
# for spelling mistakes and prompt    #
# user to correct them if only enter  #
# is pressed at prompt a user         #
# dictionary is created and user is   #
# no longer prompted for words added  #
# into the dictionary                 #               
#######################################

#number of args expected with the script
ARGS=1
#return character for comparison
retchar= $(echo -ne '\n')
#change variabble initialization - will hold user input
change=0 
#counter variable to hold count in for loop
count=0


#check if the correct number of args are specified
if [ $# -ne "$ARGS" ]
then
    echo "No file name to check specified, Please specify file as command line argument"
fi


#check if the file exists, if it does not display error message
if [ ! -f "$1" ]
then
    echo "File \"$1\" does not exist. "
else
#if file exists check spelling and save it in misspelled
    misspelled=$(cat "$1" | aspell list -l en)
fi

#create an array from the misspelled words so they can be
#treated in an easier fassion
    missarr=($misspelled)

#loop through the array of incorrect words

for i in "${missarr[@]}"
do

#assign the contents of each misspelled word to variable word
    word=$i
  
#search for the word entered in .memory file
    if grep -Fxqs "$word" .memory
    then

#if the word exists in the .memory file remove it from the array
#readjust the indices and decrement the counter which is used for
#removal of the indices in the array
       unset missarr[$count]
       missarr=( ${missarr[@]})
       count=$(($count-1))

#if the word is misspelled prompt the user whether they want to change or
#if a new line character is entered send the word into .memory file so user
#is no longer prompted

    else
        read -p "'$word' is mispelled. Press \"Enter\" to keep 
this spelling, or type correction here:  " change

        if [ "$change" = "$retchar" ]
        then
            echo "$word" >> .memory

#if enter is pressed delete word from the misspelled array
#readjust the array indices and decrement the counter used
#for removal of the indices

           unset missarr[$count]
           missarr=( ${missarr[@]})
	   count=$(($count-1))
            		
        else
#if a correction is entered store correction in change array
            corrarray+=($change) 
        fi

    fi
#increment the counter to know which element in the array is being processed
count=$(($count+1))

done

#print header for words mispelled and corrections entered
printf '\n'
printf 'MISPELLED:\t\tCORRECTIONS: \n'


#using traditionnal c loop go through the two arrays and
#print each index one of each of the warrays per line
#creating a small tabular format
for ((i=0; i<=${#missarr[@]}; i++)); do
 
   printf "%-23s %-33s\n" "${missarr[i]}" "${corrarray[i]}"

done

